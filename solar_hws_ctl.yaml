substitutions:
  NAME: solar_hws_ctl
  PREFIX: HWS Ctl
  WIFI_AP_SSID: ESP-$NAME
  REBOOT_TIMEOUT: 120min
  LOG_LEVEL: INFO
  MQTT_PREFIX: !secret MQTT_PREFIX
  TANK_TARGET_TEMP: "55"
  TANK_MAX_TEMP: "75"
  SOLAR_MAX_TEMP: "100"
  POLLING_INTERVAL: "10" # seconds
  UPDATE_INTERVAL: "300" # seconds

esphome:
  name: $NAME
  platform: ESP8266
  board: d1_mini
  build_path: _builds/$NAME/
  on_boot:
    - script.execute: control_logic
    - delay: ${POLLING_INTERVAL}s
    - climate.control:
        id: tank_thermostat
        mode: HEAT
    - component.update: tank_thermostat_target_template_sensor

<<: !include partial/wemos_d1_mini_status_led.yaml
<<: !include partial/wifi.yaml
<<: !include partial/mqtt.yaml

globals:
  - id: pump_on_counter
    type: float
  - id: pump_off_counter
    type: float
  - id: temp
    type: float

i2c:

text_sensor:
  - <<: !include partial/wifi_ip_addr_text_sensor.yaml

# https://esphome.io/components/sensor/index.html
sensor:
  - <<: !include partial/wifi_rssi_sensor.yaml
  - <<: !include partial/uptime_sensor.yaml

  - id: adc_sensor
    platform: adc
    pin: A0
    update_interval: never
    filters:
      - multiply: 1024

  - id: solar_temp_sensor
    platform: template
    lambda: return (id(adc_sensor).state - 288.6) / 6.38;
    # lambda: return (id(adc_sensor).state - 36.1997) / 6.26956;
    update_interval: never

  - id: tank_temp_sensor
    platform: template
    lambda: return (id(adc_sensor).state - 285.54) / 5.269;
    # lambda: return (id(adc_sensor).state - 36.1997) / 6.26956;
    update_interval: never

  - id: solar_temp_template_sensor
    name: $PREFIX Solar
    platform: template
    unit_of_measurement: °C
    accuracy_decimals: 0
    lambda: return id(solar_temp_sensor).state;
    retain: false
    update_interval: ${UPDATE_INTERVAL}s

  - id: tank_temp_template_sensor
    name: $PREFIX Tank
    platform: template
    unit_of_measurement: °C
    accuracy_decimals: 0
    lambda: return id(tank_temp_sensor).state;
    retain: false
    update_interval: ${UPDATE_INTERVAL}s

  - id: tank_thermostat_target_template_sensor
    name: $PREFIX Target
    platform: template
    unit_of_measurement: °C
    accuracy_decimals: 0
    lambda: return id(tank_thermostat).target_temperature;
    retain: false
    update_interval: ${UPDATE_INTERVAL}s

  - name: $PREFIX Pump Duty Cycle
    platform: template
    unit_of_measurement: "%"
    accuracy_decimals: 0
    lambda: |-
        id(temp) = id(pump_on_counter) / (id(pump_on_counter) + id(pump_off_counter)) * 100;
        id(pump_on_counter) = 0;
        id(pump_off_counter) = 0;
        return id(temp);
    retain: false
    update_interval: ${UPDATE_INTERVAL}s
    icon: mdi:progress-clock

switch:
  - id: pump_switch
    platform: gpio
    pin: D8
    retain: false
    restore_mode: ALWAYS_OFF

  - id: solar_ntc_switch
    platform: gpio
    restore_mode: ALWAYS_OFF
    pin: D5

  - id: tank_ntc_switch
    platform: gpio
    restore_mode: ALWAYS_OFF
    pin: D6

climate:
  - id: tank_thermostat
    name: $PREFIX Thermostat
    platform: thermostat
    sensor: tank_temp_template_sensor
    default_target_temperature_low: $TANK_TARGET_TEMP °C
    heat_action:
      delay: 1ms
    idle_action:
      delay: 1ms
    visual:
      min_temperature: 50 °C
      max_temperature: $TANK_MAX_TEMP °C
      temperature_step: 1 °C

script:
  - id: control_logic
    then:
      - switch.turn_on: solar_ntc_switch
      - component.update: adc_sensor
      - switch.turn_off: solar_ntc_switch
      - component.update: solar_temp_sensor
      - switch.turn_on: tank_ntc_switch
      - component.update: adc_sensor
      - switch.turn_off: tank_ntc_switch
      - component.update: tank_temp_sensor
      - if:
          condition:
            lambda: |-
                return (
                  id(tank_temp_sensor).state <= id(tank_thermostat).target_temperature
                  && id(tank_temp_sensor).state <= $TANK_MAX_TEMP
                  && id(solar_temp_sensor).state <= $SOLAR_MAX_TEMP
                );
          then:
            if:
              condition:
                lambda: return id(solar_temp_sensor).state - id(tank_temp_sensor).state >= 12;
              then:
                switch.turn_on: pump_switch
              else:
                if:
                  condition:
                    lambda: return id(solar_temp_sensor).state - id(tank_temp_sensor).state < 6;
                  then:
                    switch.turn_off: pump_switch
          else:
            switch.turn_off: pump_switch
      - if:
          condition:
            switch.is_on: pump_switch
          then:
            lambda: id(pump_on_counter) += 1;
          else:
            lambda: id(pump_off_counter) += 1;

interval:
  - interval: ${POLLING_INTERVAL}s
    then:
      script.execute: control_logic

font:
  # https://www.dafont.com/andrew-tyler.d2526
  - id: mono
    file: 'pixelmix.ttf'
    size: 8

display:
  - platform: ssd1306_i2c
    model: SSD1306 64x48
    address: 0x3C
    lambda: |-
      it.printf(0, 0, id(mono), TextAlign::TOP_LEFT, "WIFI: %.0f %s", id(wifi_rssi).state, id(mqtt_client).is_connected() ? "OK" : "--");
      it.printf(0, 10, id(mono), TextAlign::TOP_LEFT, "SOLAR: %.0f", id(solar_temp_sensor).state);
      it.printf(0, 20, id(mono), TextAlign::TOP_LEFT, "TANK: %.0f", id(tank_temp_sensor).state);
      it.printf(0, 30, id(mono), TextAlign::TOP_LEFT, "TARGET: %.0f", id(tank_thermostat).target_temperature_low);
      it.printf(0, 40, id(mono), TextAlign::TOP_LEFT, "PUMP: %s", id(pump_switch).state ? "ON" : "OFF");

