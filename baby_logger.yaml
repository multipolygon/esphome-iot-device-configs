substitutions:
  <<: !include secrets_ag.yaml

  NAME: baby_logger
  PREFIX: Baby
  WIFI_AP_SSID: ESP-BL
  REBOOT_TIMEOUT: 15min
  LOG_LEVEL: INFO
  UPDATE_INTERVAL: 5min

  ## STATES:
  BLANK: ""
  AWAKE: awake
  SLEEPING: sleeping
  FEEDING: feeding
  WALK: walk
  BATH: bath
  CAR: car

  ## NAPPY:
  CLEAN: clean
  PEE: wee
  POO: poo

  ## ICONS:
  AWAKE_MDI: emoticon-lol-outline
  AWAKE_ICON: "󰚜" # "\U000F069C"
  SLEEPING_MDI: sleep
  SLEEPING_ICON: "󰒲" # "\U000F04B2"
  FEEDING_MDI: baby-bottle
  FEEDING_ICON: "󰼹" # "\U000F0F39"
  WALK_MDI: baby-carriage # or baby-buggy
  WALK_ICON: "󰚏" # "\U000F068F"
  BATH_MDI: shower
  BATH_ICON: "󰦠" # "\U000F09A0"
  CAR_MDI: car
  CAR_ICON: "󰄋"

  CLEAN_MDI: water-off
  CLEAN_ICON: "󰖍" # "\U000F058D"
  PEE_MDI: water
  PEE_ICON: "󰖌" # "\U000F058C"
  POO_MDI: emoticon-poop
  POO_ICON: "󰇷" # "\U000F01F7"

esphome:
  <<: !include partial/esphome.yaml
  platform: ESP32
  board: wemos_d1_mini32

<<: !include partial/common.yaml

## https://esphome.io/components/time.html#sntp-time-source
time:
  - id: ntp
    platform: sntp
    servers:
      - $MQTT_BROKER
    on_time_sync:
      then:
        - component.update: age_weeks
        - component.update: age_months

## https://esphome.io/guides/automations.html#global-variables
globals:
  - id: state
    type: int
    restore_value: yes
  - id: nappy
    type: int
    restore_value: yes
  - id: expressed
    type: float
    restore_value: yes
  - id: formula
    type: float
    restore_value: yes
  - id: temperature
    type: float
    restore_value: yes
  - id: feed_time
    type: float
    restore_value: yes

sensor:
  - <<: !include partial/wifi_rssi_sensor.yaml
  - <<: !include partial/uptime_sensor.yaml

  ## https://esphome.io/components/sensor/template.html
  - platform: template
    name: Baby Feed Timer
    id: feed_timer
    lambda: |-
      if (id(feed_time) > 0.0 && id(ntp).now().year != 1970) {
        return (id(ntp).now().timestamp - id(feed_time)) / 60.0 / 60.0;
      } else {
        return 0.0;
      }
    update_interval: 60s
    unit_of_measurement: h
    icon: mdi:timer-sand
    accuracy_decimals: 1
    retain: true

  - platform: template
    name: Baby Feed Interval
    id: feed_interval
    lambda: return id(feed_timer).state;
    update_interval: never
    unit_of_measurement: h
    icon: mdi:timer-sand
    accuracy_decimals: 1
    retain: true

  - platform: template
    name: Baby Expressed Log
    id: expressed_sensor
    lambda: return id(expressed);
    update_interval: 1s
    unit_of_measurement: ml
    icon: mdi:baby-bottle-outline
    retain: true

  - platform: template
    name: Baby Formula Log
    id: formula_sensor
    lambda: return id(formula);
    update_interval: 1s
    unit_of_measurement: ml
    icon: mdi:baby-bottle
    retain: true

  - platform: template
    name: Baby Temperature Log
    id: temperature_sensor
    lambda: return id(temperature);
    update_interval: 1s
    unit_of_measurement: °C
    icon: mdi:thermometer-lines
    retain: true

  - platform: template
    name: Baby Weeks
    id: age_weeks
    lambda: return (id(ntp).now().timestamp - $BABY_DOB) / 60.0 / 60.0 / 24.0 / 7.0;
    update_interval: 1d
    unit_of_measurement: w
    icon: mdi:calendar-clock
    accuracy_decimals: 1

  - platform: template
    name: Baby Months
    id: age_months
    lambda: return (id(ntp).now().timestamp - $BABY_DOB) / 60.0 / 60.0 / 24.0 / 31.0;
    update_interval: 1d
    unit_of_measurement: m
    icon: mdi:calendar-clock
    accuracy_decimals: 1

## https://www.esphome.io/components/climate/index.html
climate:
  ## https://www.esphome.io/components/climate/thermostat.html
  - &thermostat
    platform: thermostat
    name: Baby Formula
    id: formula_thermostat
    sensor: formula_sensor
    default_target_temperature_low: 0
    retain: true
    heat_action:
      - delay: 1ms
    idle_action:
      - delay: 1ms
    visual:
      min_temperature: 0
      max_temperature: 100
      temperature_step: 1
    min_idle_time: 1s
    min_heating_off_time: 1s
    min_heating_run_time: 1s
    target_temperature_change_action:
      then:
        lambda: id(formula) = id(formula_thermostat).target_temperature;

  - <<: *thermostat
    name: Baby Expressed
    id: expressed_thermostat
    sensor: expressed_sensor
    target_temperature_change_action:
      then:
        lambda: id(expressed) = id(expressed_thermostat).target_temperature;

  - <<: *thermostat
    name: Baby Temperature
    id: temperature_thermostat
    sensor: temperature_sensor
    visual:
      min_temperature: 0
      max_temperature: 40
      temperature_step: 0.1
    target_temperature_change_action:
      then:
        lambda: id(temperature) = id(temperature_thermostat).target_temperature;

## ACTIVITY ##
text_sensor:
  - <<: !include partial/wifi_ip_addr_text_sensor.yaml

  ## https://esphome.io/components/text_sensor/template.html
  - platform: template
    name: Baby State
    id: state_text
    icon: mdi:emoticon-lol-outline
    retain: true
    update_interval: 1s
    lambda: |-
      switch (id(state)) {
      case 1: return {"$AWAKE"};
      case 2: return {"$SLEEPING"};
      case 3: return {"$FEEDING"};
      case 4: return {"$WALK"};
      case 5: return {"$BATH"};
      case 6: return {"$CAR"};
      default: return {""};
      }

  - platform: template
    name: Baby Nappy
    id: nappy_text
    icon: mdi:emoticon-poop
    retain: true
    update_interval: 1s
    lambda: |-
      switch (id(nappy)) {
      case 1: return {"$CLEAN"};
      case 2: return {"$PEE"};
      case 3: return {"$POO"};
      default: return {""};
      }

## https://esphome.io/components/switch/template.html
switch:
  # Auto generated:
  - platform: template
    id: awake_state_mode_switch
    name: Baby Awake
    icon: mdi:$AWAKE_MDI
    restore_state: false
    retain: false
    lambda: return id(state) == 1;
    turn_on_action:
      - lambda: id(state) = 1;
    turn_off_action:
      if:
        condition:
          lambda: return id(state) == 1;
        then:
          - lambda: id(state) = 0;
          - delay: 500ms
          - lambda: id(state) = 1;
  # Auto generated:
  - platform: template
    id: sleeping_state_mode_switch
    name: Baby Sleeping
    icon: mdi:$SLEEPING_MDI
    restore_state: false
    retain: false
    lambda: return id(state) == 2;
    turn_on_action:
      - lambda: id(state) = 2;
    turn_off_action:
      if:
        condition:
          lambda: return id(state) == 2;
        then:
          - lambda: id(state) = 0;
          - delay: 500ms
          - lambda: id(state) = 2;
  # Auto generated:
  - platform: template
    id: feeding_state_mode_switch
    name: Baby Feeding
    icon: mdi:$FEEDING_MDI
    restore_state: false
    retain: false
    lambda: return id(state) == 3;
    turn_on_action:
      - lambda: id(state) = 3;
      - component.update: feed_interval
      - lambda: id(feed_time) = id(ntp).now().timestamp;
    turn_off_action:
      if:
        condition:
          lambda: return id(state) == 3;
        then:
          - lambda: id(state) = 0;
          - delay: 500ms
          - lambda: id(state) = 3;
          - component.update: feed_interval
          - lambda: id(feed_time) = id(ntp).now().timestamp;
  # Auto generated:
  - platform: template
    id: walk_state_mode_switch
    name: Baby Walk
    icon: mdi:$WALK_MDI
    restore_state: false
    retain: false
    lambda: return id(state) == 4;
    turn_on_action:
      - lambda: id(state) = 4;
    turn_off_action:
      if:
        condition:
          lambda: return id(state) == 4;
        then:
          - lambda: id(state) = 0;
          - delay: 500ms
          - lambda: id(state) = 4;
  # Auto generated:
  - platform: template
    id: bath_state_mode_switch
    name: Baby Bath
    icon: mdi:$BATH_MDI
    restore_state: false
    retain: false
    lambda: return id(state) == 5;
    turn_on_action:
      - lambda: id(state) = 5;
    turn_off_action:
      if:
        condition:
          lambda: return id(state) == 5;
        then:
          - lambda: id(state) = 0;
          - delay: 500ms
          - lambda: id(state) = 5;
  # Auto generated:
  - platform: template
    id: car_state_mode_switch
    name: Baby Car
    icon: mdi:$CAR_MDI
    restore_state: false
    retain: false
    lambda: return id(state) == 6;
    turn_on_action:
      - lambda: id(state) = 6;
    turn_off_action:
      if:
        condition:
          lambda: return id(state) == 6;
        then:
          - lambda: id(state) = 0;
          - delay: 500ms
          - lambda: id(state) = 6;
  # Auto generated:
  - platform: template
    id: clean_nappy_mode_switch
    name: Baby Clean
    icon: mdi:$CLEAN_MDI
    restore_state: false
    retain: false
    lambda: return id(nappy) == 1;
    turn_on_action:
      - lambda: id(nappy) = 1;
    turn_off_action:
      if:
        condition:
          lambda: return id(nappy) == 1;
        then:
          - lambda: id(nappy) = 0;
          - delay: 500ms
          - lambda: id(nappy) = 1;
  # Auto generated:
  - platform: template
    id: pee_nappy_mode_switch
    name: Baby Pee
    icon: mdi:$PEE_MDI
    restore_state: false
    retain: false
    lambda: return id(nappy) == 2;
    turn_on_action:
      - lambda: id(nappy) = 2;
    turn_off_action:
      if:
        condition:
          lambda: return id(nappy) == 2;
        then:
          - lambda: id(nappy) = 0;
          - delay: 500ms
          - lambda: id(nappy) = 2;
  # Auto generated:
  - platform: template
    id: poo_nappy_mode_switch
    name: Baby Poo
    icon: mdi:$POO_MDI
    restore_state: false
    retain: false
    lambda: return id(nappy) == 3;
    turn_on_action:
      - lambda: id(nappy) = 3;
    turn_off_action:
      if:
        condition:
          lambda: return id(nappy) == 3;
        then:
          - lambda: id(nappy) = 0;
          - delay: 500ms
          - lambda: id(nappy) = 3;

binary_sensor:
  - platform: template
    id: feed_alert
    lambda: return id(state) == 3;
    filters:
      delayed_off: 3h
    on_release:
      then:
        mqtt.publish:
          topic: notify/warning/$NAME/feeding_time
          payload: Baby fed 3h ago!
          retain: no

font:
  - id: time_font
    file: "fonts/DejaVuSansMono.ttf"
    size: 48

  - file: fonts/materialdesignicons-webfont.ttf
    id: icon_font
    size: 64
    glyphs:
      - "$AWAKE_ICON"
      - "$SLEEPING_ICON"
      - "$FEEDING_ICON"
      - "$WALK_ICON"
      - "$BATH_ICON"
      - "$DRY_ICON"
      - "$WET_ICON"
      - "$DIRTY_ICON"

spi:
  clk_pin: 18
  mosi_pin: 23

## https://esphome.io/components/display/index.html
display:
  ## https://esphome.io/components/display/st7735.html
  - platform: st7735
    model: "INITR_GREENTAB"
    dc_pin: 17
    cs_pin: 16
    rotation: 0
    device_width: 128
    device_height: 128
    col_start: 0
    row_start: 0
    eight_bit_color: false
    update_interval: 1s
    lambda: |-
      // BGR
      auto white = Color(255, 255, 255);
      auto red = Color(0, 0, 255);
      auto green = Color(0, 255, 0);
      auto blue = Color(255, 0, 0);
      auto yellow = Color(0, 200, 255);
      auto orange = Color(0, 64, 255);

      it.rectangle(0, 0, it.get_width(), it.get_height(), id(feed_timer).state < 2.5 ? green : (
        id(feed_timer).state < 3 ? yellow : (
          id(feed_timer).state < 3.5 ? orange : red
        )
      ));

      std::string icons[] = { "", "$AWAKE_ICON", "$SLEEPING_ICON","$FEEDING_ICON", "$WALK_ICON","$BATH_ICON" };

      it.printf(it.get_width() / 2, 4, id(icon_font), white, TextAlign::TOP_CENTER, icons[id(state)].c_str());

      if (id(feed_time) > 0.0) {
        it.printf(
          it.get_width() / 2,
          it.get_height(),
          id(time_font),
          white,
          TextAlign::BOTTOM_CENTER,
          "%.1f",
          id(feed_timer).state
        );
      }
