substitutions:
  <<: !include secrets_ag.yaml
  NAME: baby_logger
  PREFIX: Baby
  WIFI_AP_SSID: ESP-BL
  REBOOT_TIMEOUT: 15min
  LOG_LEVEL: INFO
  UPDATE_INTERVAL: 5min
  ## STRINGS:
  NONE: "-"
  AWAKE: awake
  SLEEPING: sleeping
  FEEDING: feeding
  DRY: dry
  WET: wet
  DIRTY: dirty
  ## ICONS:
  AWAKE_ICON: "\U000F069C"
  SLEEPING_ICON: "\U000F04B2"
  FEEDING_ICON: "\U000F0F39"
  DRY_ICON: "\U000F058D"
  WET_ICON: "\U000F058C"
  DIRTY_ICON: "\U000F01F7"

esphome:
  <<: !include partial/esphome_d1_mini.yaml

<<: !include partial/wemos_d1_mini_status_led.yaml
<<: !include partial/wifi.yaml
<<: !include partial/mqtt.yaml

text_sensor:
  - <<: !include partial/wifi_ip_addr_text_sensor.yaml

  ## https://esphome.io/components/text_sensor/template.html
  - platform: template
    name: Baby State
    id: state
    icon: mdi:baby-face
    retain: true

  - platform: template
    name: Baby Nappy
    id: nappy
    icon: mdi:emoticon-poop
    retain: true

sensor:
  - <<: !include partial/wifi_rssi_sensor.yaml
  - <<: !include partial/uptime_sensor.yaml

  ## https://esphome.io/components/sensor/template.html
  - platform: template
    name: Baby Expressed Log
    id: baby_expressed_fake_temp
    lambda: return id(baby_expressed).target_temperature;
    update_interval: 1s
    unit_of_measurement: ml
    icon: mdi:baby-bottle-outline
    retain: true

  - platform: template
    name: Baby Formula Log
    id: baby_formula_fake_temp
    lambda: return id(baby_formula).target_temperature;
    update_interval: 1s
    unit_of_measurement: ml
    icon: mdi:baby-bottle
    retain: true

  - platform: template
    name: Baby Temperature Log
    id: baby_temperature_fake_temp
    lambda: return id(baby_temperature).target_temperature;
    update_interval: 1s
    unit_of_measurement: Â°C
    icon: mdi:thermometer-lines
    retain: true

## https://www.esphome.io/components/climate/index.html
climate:
  ## https://www.esphome.io/components/climate/thermostat.html
  - &thermostat
    platform: thermostat
    name: Baby Formula
    id: baby_formula
    sensor: baby_formula_fake_temp
    default_target_temperature_low: 0
    retain: true
    heat_action:
      - delay: 1ms
    idle_action:
      - delay: 1ms
    visual:
      min_temperature: 0
      max_temperature: 100
      temperature_step: 1

  - <<: *thermostat
    name: Baby Expressed
    id: baby_expressed
    sensor: baby_expressed_fake_temp

  - <<: *thermostat
    name: Baby Temperature
    id: baby_temperature
    sensor: baby_temperature_fake_temp
    visual:
      min_temperature: 35
      max_temperature: 40
      temperature_step: 0.1

switch:
  ## ACTIVITY ##

  ## https://esphome.io/components/switch/template.html
  - &state_switch
    platform: template
    restore_state: true
    name: Baby Sleeping
    icon: mdi:sleep
    lambda: return id(state).state == "$SLEEPING";
    turn_on_action:
      text_sensor.template.publish:
        id: state
        state: $SLEEPING
    turn_off_action:
      - text_sensor.template.publish:
          id: state
          state: $NONE
      - delay: 500ms
      - text_sensor.template.publish:
          id: state
          state: $SLEEPING

  - <<: *state_switch
    name: Baby Awake
    icon: mdi:baby-face
    lambda: return id(state).state == "$AWAKE";
    turn_on_action:
      text_sensor.template.publish:
        id: state
        state: $AWAKE
    turn_off_action:
      - text_sensor.template.publish:
          id: state
          state: $NONE
      - delay: 500ms
      - text_sensor.template.publish:
          id: state
          state: $AWAKE

  - <<: *state_switch
    name: Baby Feeding
    icon: mdi:baby-bottle
    lambda: return id(state).state == "$FEEDING";
    turn_on_action:
      text_sensor.template.publish:
        id: state
        state: $FEEDING
    turn_off_action:
      - text_sensor.template.publish:
          id: state
          state: $NONE
      - delay: 500ms
      - text_sensor.template.publish:
          id: state
          state: $FEEDING

  ## NAPPY ##

  - &nappy_switch
    platform: template
    name: Dry Nappy
    icon: mdi:water-off
    lambda: return id(nappy).state == "$DRY";
    turn_on_action:
      text_sensor.template.publish:
        id: nappy
        state: $DRY
    turn_off_action:
      - text_sensor.template.publish:
          id: nappy
          state: $NONE
      - delay: 500ms
      - text_sensor.template.publish:
          id: nappy
          state: $DRY

  - <<: *nappy_switch
    name: Wet Nappy
    icon: mdi:water
    lambda: return id(nappy).state == "$WET";
    turn_on_action:
      text_sensor.template.publish:
        id: nappy
        state: $WET
    turn_off_action:
      - text_sensor.template.publish:
          id: nappy
          state: $NONE
      - delay: 500ms
      - text_sensor.template.publish:
          id: nappy
          state: $WET

  - <<: *nappy_switch
    name: Dirty Nappy
    icon: mdi:emoticon-poop
    lambda: return id(nappy).state == "$DIRTY";
    turn_on_action:
      text_sensor.template.publish:
        id: nappy
        state: $DIRTY
    turn_off_action:
      - text_sensor.template.publish:
          id: nappy
          state: $NONE
      - delay: 500ms
      - text_sensor.template.publish:
          id: nappy
          state: $DIRTY

font:
  - file: fonts/materialdesignicons-webfont.ttf
    id: icon_font
    size: 32
    glyphs:
      - "$AWAKE_ICON"
      - "$SLEEPING_ICON"
      - "$FEEDING_ICON"
      - "$DRY_ICON"
      - "$WET_ICON"
      - "$DIRTY_ICON"

i2c:

## https://esphome.io/components/display/index.html
display:
  ## https://esphome.io/components/display/ssd1306.html
  - id: oled
    platform: ssd1306_i2c
    model: SSD1306 64x48
    address: 0x3C
    brightness: 0%
    update_interval: 1s
    lambda: |-
      // if (id(state).has_state()) { it.printf(0, 0, id(tiny_font), TextAlign::TOP_LEFT, id(state).state.c_str()); }
      // if (id(nappy).has_state()) { it.printf(0, it.get_height(), id(tiny_font), TextAlign::TOP_RIGHT, id(nappy).state.c_str()); }

      if (id(state).state == "$AWAKE") { it.printf(0, 0, id(icon_font), TextAlign::TOP_LEFT, "$AWAKE_ICON"); }
      if (id(state).state == "$SLEEPING") { it.printf(0, 0, id(icon_font), TextAlign::TOP_LEFT, "$SLEEPING_ICON"); }
      if (id(state).state == "$FEEDING") { it.printf(0, 0, id(icon_font), TextAlign::TOP_LEFT, "$FEEDING_ICON"); }

      if (id(nappy).state == "$DRY") { it.printf(it.get_width(), 0, id(icon_font), TextAlign::TOP_RIGHT, "$DRY_ICON"); }
      if (id(nappy).state == "$WET") { it.printf(it.get_width(), 0, id(icon_font), TextAlign::TOP_RIGHT, "$WET_ICON"); }
      if (id(nappy).state == "$DIRTY") { it.printf(it.get_width(), 0, id(icon_font), TextAlign::TOP_RIGHT, "$DIRTY_ICON"); }
